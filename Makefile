# ==========================================================
# üß± iBot lightweight build & deploy Makefile
# ==========================================================

include .env
export

PROJECT_NAME    := ibot
DATE_TAG        := $(shell date +%F_%H-%M-%S)

# --- Paths ---
BUILD_DIR       := build
DEPLOY_DIR      := $(HOME)/Work/Deploys/$(PROJECT_NAME)_prod
DEPLOY_BACKUP   := $(DEPLOY_DIR)/backups

# --- Tools ---
ZIGBUILD        := cargo zigbuild --release
RUST_TARGET     := target
MKDIR_P         := mkdir -p

# ==========================================================
# üß© HELP
# ==========================================================
.PHONY: help
help h:
	@echo "üõ†  Commands:"
	@echo "  make b       ‚Äì build binaries for all platforms"
	@echo "  make d       ‚Äì deploy binaries to $(DEPLOY_DIR)"
	@echo "  make r-lnx   ‚Äì run Linux binary from build/"
	@echo "  make r-mac   ‚Äì run macOS Intel binary from build/"
	@echo "  make r-arm   ‚Äì run macOS ARM binary from build/"
	@echo "  make clean   ‚Äì remove build artifacts"
	@echo "  make p / push - push all changes to GitHub"
	@echo "  make h       ‚Äì show this help"

# ==========================================================
# üî® BUILD
# ==========================================================
.PHONY: build b
b build:
	@echo "üî® Building $(PROJECT_NAME) for all platforms..."
	@$(MKDIR_P) $(BUILD_DIR)

	@echo "üêß Linux x86_64..."
	@$(ZIGBUILD) --target x86_64-unknown-linux-gnu \
	&& cp $(RUST_TARGET)/x86_64-unknown-linux-gnu/release/$(PROJECT_NAME) $(BUILD_DIR)/$(PROJECT_NAME)-linux-x86_64 \
	&& echo "‚úÖ Linux build done" \
	|| echo "‚ö†Ô∏è Linux build failed"

	@echo "üçé macOS Intel..."
	@$(ZIGBUILD) --target x86_64-apple-darwin \
	&& cp $(RUST_TARGET)/x86_64-apple-darwin/release/$(PROJECT_NAME) $(BUILD_DIR)/$(PROJECT_NAME)-mac-intel \
	&& echo "‚úÖ macOS Intel build done" \
	|| echo "‚ö†Ô∏è macOS Intel build failed"

	@echo "üçè macOS ARM..."
	@$(ZIGBUILD) --target aarch64-apple-darwin \
	&& cp $(RUST_TARGET)/aarch64-apple-darwin/release/$(PROJECT_NAME) $(BUILD_DIR)/$(PROJECT_NAME)-mac-arm64 \
	&& echo "‚úÖ macOS ARM build done" \
	|| echo "‚ö†Ô∏è macOS ARM build failed"

	@echo "üéØ Build complete. Binaries are in $(BUILD_DIR):"
	@ls -lh $(BUILD_DIR)

# ==========================================================
# üöÄ DEPLOY
# ==========================================================
.PHONY: deploy d
d deploy:
	@echo "üöÄ Deploying $(PROJECT_NAME) ‚Üí $(DEPLOY_DIR)"
	@$(MKDIR_P) $(DEPLOY_DIR) $(DEPLOY_BACKUP)

	# @echo "üì¶ Backing up existing binaries..."
	# @if [ -d "$(DEPLOY_DIR)" ]; then \
	# 	cp -R $(DEPLOY_DIR) $(DEPLOY_BACKUP)/$(DATE_TAG); \
	# 	echo "üóÇ  Backup saved to $(DEPLOY_BACKUP)/$(DATE_TAG)"; \
	# fi

	@echo "üî® Building fresh binaries..."
	@$(MAKE) b

	@echo "üìÅ Copying new binaries to deploy directory..."
	cp $(BUILD_DIR)/$(PROJECT_NAME)-* $(DEPLOY_DIR)/
	chmod +x $(DEPLOY_DIR)/$(PROJECT_NAME)-*

	@echo "üìÅ Copying .env file..."
	cp .env $(DEPLOY_DIR)/.env

	@echo "üìÅ Copying  Makefile..."
		cp Makefile $(DEPLOY_DIR)/Makefile

	@$(MAKE) p

	@echo "‚úÖ Deploy complete!"

# ==========================================================
# ‚ñ∂Ô∏è RUNNERS
# ==========================================================
.PHONY: run-linux run-mac run-arm r-lnx r-mac r-arm
r-lnx run-linux:
	@echo "‚ñ∂Ô∏è  Running Linux build..."
	@$(BUILD_DIR)/$(PROJECT_NAME)-linux-x86_64

r-mac run-mac:
	@echo "‚ñ∂Ô∏è  Running macOS Intel build..."
	@$(BUILD_DIR)/$(PROJECT_NAME)-mac-intel

r-arm run-arm:
	@echo "‚ñ∂Ô∏è  Running macOS ARM build..."
	@$(BUILD_DIR)/$(PROJECT_NAME)-mac-arm64

# ==========================================================
# üßπ CLEAN
# ==========================================================
.PHONY: clean
clean:
	@echo "üßπ Cleaning build artifacts..."
	rm -rf $(BUILD_DIR) $(RUST_TARGET)
	@echo "‚úÖ Clean done."


# ==========================================================
# üì§ AUTO PUSH TO GITHUB (optional)
# ==========================================================
.PHONY: push p
p push:
	@echo "üåê Syncing $(DEPLOY_DIR) ‚Üí GitHub..."
	@if [ ! -d "$(DEPLOY_DIR)/.git" ]; then \
		echo "‚ùå No git repo in $(DEPLOY_DIR). Run 'git init' there first."; \
		exit 1; \
	fi

	cd $(DEPLOY_DIR) && \
	git add . && \
	git commit -m "Auto deploy $(DATE_TAG)" || echo "‚ÑπÔ∏è Nothing new to commit" && \
	git push origin main && \
	echo "‚úÖ Pushed successfully to GitHub."
